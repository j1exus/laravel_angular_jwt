!function(){"use strict";angular.module("app",["app.controllers","app.filters","app.services","app.directives","app.routes","app.config","app.run"]);angular.module("app.routes",["ui.router","satellizer"]),angular.module("app.controllers",["ngMaterial","ui.router","restangular","satellizer","ngMessages"]),angular.module("app.filters",[]),angular.module("app.services",[]),angular.module("app.directives",[]),angular.module("app.config",["ngMaterial"]),angular.module("app.run",["ui.router","satellizer"])}(),function(){"use strict";angular.module("app.routes").config(["$stateProvider","$urlRouterProvider","$authProvider","$locationProvider",function(e,t,r,a){r.loginUrl="/api/auth/login",r.signupUrl="/api/auth/register",a.html5Mode(!0);var o=function(e){return"/views/app/"+e+"/"+e+".html"};t.otherwise("/"),e.state("main",{url:"/",views:{header:{templateUrl:o("header")},main:{templateUrl:o("main")},footer:{templateUrl:o("footer")}},data:{requiredLogin:!0}}).state("login",{url:"/login",views:{main:{templateUrl:o("login")}},params:{message:null},data:{requiredLogin:!1}}).state("register",{url:"/register",views:{main:{templateUrl:o("register")}},data:{requiredLogin:!1}}).state("verificationsent",{views:{main:{templateUrl:o("verificationsent")}},data:{requiredLogin:!1}}).state("verify",{url:"/verify/:code",views:{main:{templateUrl:o("verify")}},data:{requiredLogin:!1}}).state("passwordrestore",{url:"/password/restore",views:{main:{templateUrl:o("passwordrestore")}},data:{requiredLogin:!1}}).state("passwordreset",{url:"/password/:code",views:{main:{templateUrl:o("passwordreset")}},data:{requiredLogin:!1}}),a.html5Mode(!0)}])}(),function(){"use strict";angular.module("app.config").config(["$mdThemingProvider",function(e){e.theme("default").primaryPalette("blue-grey").accentPalette("cyan").warnPalette("red")}])}(),function(){"use strict";angular.module("app.run").run(["$rootScope","$state","$auth",function(e,t,r){e.$on("$stateChangeStart",function(e,a){var o=!1;a.data&&a.data.requiredLogin&&(o=!0),o&&!r.isAuthenticated()&&(e.preventDefault(),t.go("login")),!o&&r.isAuthenticated()&&(e.preventDefault(),t.go("main"))})}])}(),function(){"use strict";angular.module("app.services").factory("ToastService",["$mdToast",function(e){return{show:function(t){return t.content=t.content||null,t.delay=void 0===t.delay?6e3:t.delay,t.position=t.position||"top right",t.action=t.action||null,t.templateUrl=t.templateUrl||null,t.controller=t.controller||null,null===t.templateUrl?e.show(e.simple().content(t.content).position(t.position).action(t.action).hideDelay(t.delay)):e.show({hideDelay:t.delay,position:t.position,templateUrl:getToast(t.templateUrl),controller:t.controller,locals:{text:t.content}})}}}])}(),function(){"use strict";function e(e,t,r){e.logout=function(){t.logout(),r.go("login")};var a;e.openMenu=function(e,t){a=t,e(t)}}e.$inject=["$scope","$auth","$state"],angular.module("app.controllers").controller("HeaderController",e)}(),function(){"use strict";function e(e,t,r,a,o){e.user={},e.error=null;var n={};a.message&&(n.content=a.message,o.show(n)),e.login=function(){t.login(e.user).then(function(e){r.go("main")})["catch"](function(t){switch(t.status){case 401:e.error="Sorry, we couldn't find an account with provided username or password is wrong.";break;case 403:e.error="You account is not verified. Please, check your email. If you have any troubles - please, contact us.";break;case 500:e.error="Internal server error.";break;default:e.error="Something went wrong. Please, try again latter."}})}}e.$inject=["$scope","$auth","$state","$stateParams","ToastService"],angular.module("app.controllers").controller("AuthController",e)}(),function(){"use strict";function e(e,t,r,a){e.passwordReset=function(){e.User.token=r.code,console.log(e.User),a.all("api/auth/resetconfirm").post(e.User).then(function(e){t.go("login",{message:"Your password has been changed!"})})["catch"](function(t){switch(t.status){case 400:e.error="Invalid confirmation code.";break;default:e.error="Something went wrong. Please, try again latter."}})}}e.$inject=["$scope","$state","$stateParams","Restangular"],angular.module("app.controllers").controller("PasswordResetController",e)}(),function(){"use strict";function e(e,t,r,a){e.restoredUser={};e.restore=function(){a.all("api/auth/reset").post({email:e.restoredUser.email}).then(function(e){t.go("login",{message:"Message have been send. Please, check your email."})})["catch"](function(t){switch(t.status){case 400:e.error="Email not found.";break;default:e.error="Something went wrong. Please, try again latter."}})}}e.$inject=["$scope","$state","ToastService","Restangular"],angular.module("app.controllers").controller("RestoreController",e)}(),function(){"use strict";function e(e,t,r){e.newUser={},e.error=null,e.register=function(){e.error=null,t.signup(e.newUser).then(function(t){r.go("verificationsent",{email:e.newUser.email})})["catch"](function(t){switch(t.status){case 409:e.error="User with given email already exists.";break;case 500:e.error="Internal server error.";break;default:e.error="Something went wrong. Please, try again latter."}})}}e.$inject=["$scope","$auth","$state"],angular.module("app.controllers").controller("RegisterController",e)}(),function(){"use strict";function e(e,t,r,a){a.all("api/auth/verify").post({confirmationcode:r.code}).then(function(e){t.go("login",{message:"Thank you! You account has been activated!"})})["catch"](function(t){switch(t.status){case 400:e.error="Invalid confirmation code.";break;default:e.error="Something went wrong. Please, try again latter."}})}e.$inject=["$scope","$state","$stateParams","Restangular"],angular.module("app.controllers").controller("VerifyController",e)}();
//# sourceMappingURL=data:application/json;base64,
